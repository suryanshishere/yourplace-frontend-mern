{"version":3,"file":"static/js/191.db0f3d97.chunk.js","mappings":"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","sources":["shared/components/FormElements/ImageUpload.js","shared/components/FormElements/Input.js","shared/components/UIElements/Card.js","shared/components/UIElements/ErrorModal.js","shared/components/UIElements/Modal.js","shared/hooks/form-hook.js","shared/hooks/http-hook.js","shared/util/validators.js","user/pages/Auth.js"],"sourcesContent":["import React, { useRef, useState, useEffect } from 'react';\r\n\r\nimport Button from './Button';\r\nimport './ImageUpload.css';\r\n\r\nconst ImageUpload = props => {\r\n    const [file, setFile] = useState();\r\n    const [previewUrl, setPreviewUrl] = useState();\r\n    const [isValid, setIsValid] = useState(false);\r\n\r\n    const filePickerRef = useRef();\r\n\r\n    useEffect(() => {\r\n        if (!file) {\r\n            return;\r\n        }\r\n        const fileReader = new FileReader();\r\n        fileReader.onload = () => {\r\n            setPreviewUrl(fileReader.result);\r\n        };\r\n        fileReader.readAsDataURL(file);\r\n    }, [file]);\r\n\r\n    const pickedHandler = event => {\r\n        let pickedFile;\r\n        let fileIsValid = isValid;\r\n        if (event.target.files && event.target.files.length === 1) {\r\n            pickedFile = event.target.files[0];\r\n            setFile(pickedFile);\r\n            setIsValid(true);\r\n            fileIsValid = true;\r\n        } else {\r\n            setIsValid(false);\r\n            fileIsValid = false;\r\n        }\r\n        props.onInput(props.id, pickedFile, fileIsValid);\r\n    };\r\n\r\n    const pickImageHandler = () => {\r\n        filePickerRef.current.click();\r\n    };\r\n\r\n\r\n    return (\r\n        <div className=\"form-control\">\r\n            <input\r\n                id={props.id}\r\n                ref={filePickerRef}\r\n                style={{ display: 'none' }}\r\n                type=\"file\"\r\n                accept=\".jpg,.png,.jpeg\"\r\n                onChange={pickedHandler}\r\n            />\r\n            <div className={`image-upload ${props.center && 'center'}`}>\r\n                <div className=\"image-upload__preview\">\r\n                    {previewUrl && <img src={previewUrl} alt=\"Preview\" />}\r\n                    {!previewUrl && <p>Please pick an image.</p>}\r\n                </div>\r\n                <Button type=\"button\" onClick={pickImageHandler}>\r\n                    PICK IMAGE\r\n                </Button>\r\n            </div>\r\n            {!isValid && <p>{props.errorText}</p>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ImageUpload","import React, { useReducer, useEffect } from 'react';\r\n\r\nimport { validate } from '../../util/validators';\r\nimport './Input.css';\r\n\r\nconst inputReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case 'CHANGE':\r\n      return {\r\n        ...state,\r\n        value: action.val,\r\n        isValid: validate(action.val, action.validators)\r\n      };\r\n    case 'TOUCH': {\r\n      return {\r\n        ...state,\r\n        isTouched: true\r\n      }\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst Input = props => {\r\n  const [inputState, dispatch] = useReducer(inputReducer, {\r\n    value: props.initialValue  || '',\r\n    isTouched: false,\r\n    isValid: props.initialValid  || false\r\n  });\r\n\r\n  const { id, onInput } = props;\r\n  const { value, isValid } = inputState;\r\n\r\n  useEffect(() => {\r\n    onInput(id, value, isValid)\r\n  }, [id, value, isValid, onInput]);\r\n\r\n  const changeHandler = event => {\r\n    dispatch({\r\n      type: 'CHANGE',\r\n      val: event.target.value,\r\n      validators: props.validators\r\n    });\r\n  };\r\n\r\n  const touchHandler = () => {\r\n    dispatch({\r\n      type: 'TOUCH'\r\n    });\r\n  };\r\n\r\n  const element =\r\n    props.element === 'input' ? (\r\n      <input\r\n        id={props.id}\r\n        type={props.type}\r\n        placeholder={props.placeholder}\r\n        onChange={changeHandler}\r\n        onBlur={touchHandler}\r\n        value={inputState.value}\r\n      />\r\n    ) : (\r\n      <textarea\r\n        id={props.id}\r\n        rows={props.rows || 3}\r\n        onChange={changeHandler}\r\n        onBlur={touchHandler}\r\n        value={inputState.value}\r\n      />\r\n    );\r\n\r\n  return (\r\n    <div\r\n      className={`form-control ${!inputState.isValid && inputState.isTouched &&\r\n        'form-control--invalid'}`}\r\n    >\r\n      <label htmlFor={props.id}>{props.label}</label>\r\n      {element}\r\n      {!inputState.isValid && inputState.isTouched && <p>{props.errorText}</p>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Input;","import React from 'react';\r\n\r\nimport './Card.css';\r\n\r\nconst Card = props => {\r\n  return (\r\n    <div className={`card ${props.className}`} style={props.style}>\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;","import React from 'react';\r\n\r\nimport Modal from './Modal';\r\nimport Button from '../FormElements/Button';\r\n\r\nconst ErrorModal = (props) => {\r\n    return (\r\n        <Modal\r\n            onCancel={props.onClear}\r\n            header=\"An Error Occurred!\"\r\n            show={!!props.error}\r\n            footer={<Button onClick={props.onClear}>Okay</Button>}\r\n        >\r\n            <p>{props.error}</p>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default ErrorModal","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { CSSTransition } from 'react-transition-group';\r\nimport Backdrop from './Backdrop';\r\nimport './Modal.css';\r\n\r\nconst ModalOverlay = (props) => {\r\n    const content = (\r\n        <div className={`modal ${props.className}`} style={props.style}>\r\n            <header className={`modal__header ${props.headerClass}`}>\r\n                <h2>{props.header}</h2>\r\n            </header>\r\n            <form\r\n                onSubmit={\r\n                    props.onSubmit ? props.onSubmit : event => event.preventDefault()\r\n                }\r\n            >\r\n                <div className={`modal__content ${props.contentClass}`}>\r\n                    {props.children}\r\n                </div>\r\n                <footer className={`modal__footer ${props.footerClass}`}>\r\n                    {props.footer}\r\n                </footer>\r\n            </form>\r\n        </div>\r\n    )\r\n\r\n\r\n    return ReactDOM.createPortal(content, document.getElementById('modal-hook'));\r\n}\r\n\r\nconst Modal = props => {\r\n    return (\r\n        <>\r\n            {props.show && <Backdrop onClick={props.onCancel} />}\r\n            <CSSTransition\r\n                in={props.show}\r\n                mountOnEnter\r\n                unmountOnExit\r\n                timeout={200}\r\n                classNames=\"modal\"\r\n            >\r\n                <ModalOverlay {...props} />\r\n            </CSSTransition>\r\n        </>\r\n\r\n    )\r\n}\r\n\r\nexport default Modal","import { useCallback, useReducer } from 'react';\r\n\r\nconst formReducer = (state, action) => {\r\n    switch (action.type) {\r\n        case 'INPUT_CHANGE':\r\n            let formIsValid = true;\r\n            for (const inputId in state.inputs) {\r\n                if (inputId === action.inputId) {\r\n                    formIsValid = formIsValid && action.isValid;\r\n                } else {\r\n                    formIsValid = formIsValid && state.inputs[inputId].isValid;\r\n                }\r\n            }\r\n\r\n            return {\r\n                ...state,\r\n                inputs: {\r\n                    ...state.inputs,\r\n                    [action.inputId]: { value: action.value, isValid: action.isValid }\r\n                },\r\n                isValid: formIsValid\r\n            }\r\n\r\n        case 'SET_DATA':\r\n            return {\r\n                inputs: action.inputs,\r\n                isValid: action.formIsValid,\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\nexport const useForm = (intialInput, initialFormValidity) => {\r\n    const [formState, dispatch] = useReducer(formReducer, {\r\n        inputs: intialInput,\r\n        isValid: initialFormValidity\r\n    });\r\n\r\n    const inputHandler = useCallback((id, value, isValid) => {\r\n        dispatch({\r\n            type: 'INPUT_CHANGE',\r\n            value: value,\r\n            isValid: isValid,\r\n            inputId: id\r\n        });\r\n    }, []);\r\n\r\n    const setFormData = useCallback((inputData, formValidity) => {\r\n        dispatch({\r\n            type: 'SET_DATA',\r\n            inputs: inputData,\r\n            formIsValid: formValidity\r\n        })\r\n    }, []);\r\n\r\n    return [formState, inputHandler, setFormData];\r\n}","import { useState, useCallback, useRef, useEffect } from 'react';\r\n\r\nexport const useHttpClient = () => {\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [error, setError] = useState();\r\n\r\n    const activeHttpRequests = useRef([]);\r\n\r\n    const sendRequest = useCallback(\r\n        async (url, method = 'GET', body = null, headers = {}) => {\r\n            setIsLoading(true);\r\n            const httpAbortCtrl = new AbortController();\r\n            activeHttpRequests.current.push(httpAbortCtrl);\r\n\r\n            try {\r\n                const response = await fetch(url, {\r\n                    method,\r\n                    body,\r\n                    headers,\r\n                    signal: httpAbortCtrl.signal\r\n                });\r\n\r\n                const responseData = await response.json();\r\n\r\n                activeHttpRequests.current = activeHttpRequests.current.filter(\r\n                    reqCtrl => reqCtrl !== httpAbortCtrl\r\n                );\r\n\r\n                if (!response.ok) {\r\n                    throw new Error(responseData.message);\r\n                }\r\n\r\n                setIsLoading(false);\r\n                return responseData;\r\n                \r\n            } catch (err) {\r\n                setError(err.message);\r\n                setIsLoading(false);\r\n                throw err;\r\n            }\r\n        },\r\n        []\r\n    );\r\n\r\n    const clearError = () => {\r\n        setError(null);\r\n    }\r\n\r\n    useEffect(() => {\r\n        activeHttpRequests.current.forEach(aboutCtrl => aboutCtrl.about());\r\n    }, []);\r\n\r\n    return { isLoading, error, sendRequest, clearError };\r\n\r\n};","const VALIDATOR_TYPE_REQUIRE = 'REQUIRE';\r\nconst VALIDATOR_TYPE_MINLENGTH = 'MINLENGTH';\r\nconst VALIDATOR_TYPE_MAXLENGTH = 'MAXLENGTH';\r\nconst VALIDATOR_TYPE_MIN = 'MIN';\r\nconst VALIDATOR_TYPE_MAX = 'MAX';\r\nconst VALIDATOR_TYPE_EMAIL = 'EMAIL';\r\nconst VALIDATOR_TYPE_FILE = 'FILE';\r\n\r\nexport const VALIDATOR_REQUIRE = () => ({ type: VALIDATOR_TYPE_REQUIRE });\r\nexport const VALIDATOR_FILE = () => ({ type: VALIDATOR_TYPE_FILE });\r\nexport const VALIDATOR_MINLENGTH = val => ({\r\n  type: VALIDATOR_TYPE_MINLENGTH,\r\n  val: val\r\n});\r\nexport const VALIDATOR_MAXLENGTH = val => ({\r\n  type: VALIDATOR_TYPE_MAXLENGTH,\r\n  val: val\r\n});\r\nexport const VALIDATOR_MIN = val => ({ type: VALIDATOR_TYPE_MIN, val: val });\r\nexport const VALIDATOR_MAX = val => ({ type: VALIDATOR_TYPE_MAX, val: val });\r\nexport const VALIDATOR_EMAIL = () => ({ type: VALIDATOR_TYPE_EMAIL });\r\n\r\nexport const validate = (value, validators) => {\r\n  let isValid = true;\r\n  for (const validator of validators) {\r\n    if (validator.type === VALIDATOR_TYPE_REQUIRE) {\r\n      isValid = isValid && value.trim().length > 0;\r\n    }\r\n    if (validator.type === VALIDATOR_TYPE_MINLENGTH) {\r\n      isValid = isValid && value.trim().length >= validator.val;\r\n    }\r\n    if (validator.type === VALIDATOR_TYPE_MAXLENGTH) {\r\n      isValid = isValid && value.trim().length <= validator.val;\r\n    }\r\n    if (validator.type === VALIDATOR_TYPE_MIN) {\r\n      isValid = isValid && +value >= validator.val;\r\n    }\r\n    if (validator.type === VALIDATOR_TYPE_MAX) {\r\n      isValid = isValid && +value <= validator.val;\r\n    }\r\n    if (validator.type === VALIDATOR_TYPE_EMAIL) {\r\n      isValid = isValid && /^\\S+@\\S+\\.\\S+$/.test(value);\r\n    }\r\n  }\r\n  return isValid;\r\n};","import React, { useContext, useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport Card from '../../shared/components/UIElements/Card';\r\nimport Input from '../../shared/components/FormElements/Input';\r\nimport Button from '../../shared/components/FormElements/Button';\r\nimport {\r\n    VALIDATOR_EMAIL,\r\n    VALIDATOR_MINLENGTH,\r\n    VALIDATOR_REQUIRE\r\n} from '../../shared/util/validators';\r\nimport { useForm } from '../../shared/hooks/form-hook';\r\nimport { AuthContext } from '../../shared/context/auth-context';\r\nimport ErrorModal from '../../shared/components/UIElements/ErrorModal';\r\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\r\nimport { useHttpClient } from '../../shared/hooks/http-hook';\r\nimport ImageUpload from '../../shared/components/FormElements/ImageUpload';\r\nimport './Auth.css';\r\n\r\nconst Auth = () => {\r\n\r\n    const auth = useContext(AuthContext);\r\n    const navigate = useNavigate();\r\n\r\n    const [isLoginMode, setIsLoginMode] = useState(true);\r\n    const { isLoading, error, sendRequest, clearError } = useHttpClient();\r\n\r\n\r\n    const [formState, inputHandler, setFormData] = useForm(\r\n        {\r\n            email: {\r\n                value: '',\r\n                isValid: false\r\n            },\r\n            password: {\r\n                value: '',\r\n                isValid: false\r\n            }\r\n        },\r\n        false\r\n    );\r\n\r\n    const switchModeHandler = () => {\r\n\r\n        if (!isLoginMode) {\r\n            setFormData(\r\n                {\r\n                    ...formState.inputs,\r\n                    name: undefined,\r\n                    image: undefined\r\n                },\r\n                formState.inputs.email.isValid && formState.inputs.password.isValid\r\n            )\r\n        } else {\r\n            setFormData(\r\n                {\r\n                    ...formState.inputs,\r\n                    name: {\r\n                        value: '',\r\n                        isValid: false,\r\n                    },\r\n                    image: {\r\n                        value: null,\r\n                        isValid: false\r\n                    }\r\n                },\r\n                false\r\n            );\r\n        }\r\n\r\n        setIsLoginMode(prevMode => !prevMode);\r\n    }\r\n\r\n    const authSubmitHandler = async event => {\r\n        event.preventDefault();\r\n\r\n        if (isLoginMode) {\r\n            try {\r\n                const responseData = await sendRequest(\r\n                    `${process.env.REACT_APP_BACKEND_URL}/users/login`,\r\n                    'POST',\r\n                    JSON.stringify({\r\n                        email: formState.inputs.email.value,\r\n                        password: formState.inputs.password.value\r\n                    }),\r\n                    {\r\n                        'Content-Type': 'application/json'\r\n                    }\r\n                );\r\n\r\n                auth.login(responseData.userId, responseData.token);\r\n                navigate('/');\r\n\r\n            } catch (error) { }\r\n        } else {\r\n            try {\r\n                const formData = new FormData();\r\n                formData.append('email', formState.inputs.email.value);\r\n                formData.append('name', formState.inputs.name.value);\r\n                formData.append('password', formState.inputs.password.value);\r\n                formData.append('image', formState.inputs.image.value);\r\n\r\n                console.log(formData);\r\n\r\n                const responseData = await sendRequest(\r\n                    `${process.env.REACT_APP_BACKEND_URL}/users/signup`,\r\n                    'POST',\r\n                    formData, {\r\n                    Authorization: 'Bearer ' + auth.token\r\n                }\r\n                );\r\n\r\n                console.log(responseData);\r\n                auth.login(responseData.userId, responseData.token);\r\n                navigate('/');\r\n\r\n            } catch (error) { };\r\n        };\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <ErrorModal error={error} onClear={clearError} />\r\n            <Card className=\"authentication\">\r\n                {isLoading && <LoadingSpinner asOverlay />}\r\n                <h2>Login Required</h2>\r\n                <hr />\r\n                <form onSubmit={authSubmitHandler}>\r\n                    {!isLoginMode && (\r\n                        <Input\r\n                            element=\"input\"\r\n                            id=\"name\"\r\n                            type=\"text\"\r\n                            label=\"Your Name\"\r\n                            validators={[VALIDATOR_REQUIRE()]}\r\n                            errorText=\"Please enter a name.\"\r\n                            onInput={inputHandler}\r\n                        />\r\n                    )}\r\n                    {!isLoginMode && (\r\n                        <ImageUpload center id=\"image\" onInput={inputHandler} />\r\n                    )}\r\n                    <Input\r\n                        element=\"input\"\r\n                        id=\"email\"\r\n                        type=\"email\"\r\n                        label=\"E-Mail\"\r\n                        validators={[VALIDATOR_EMAIL()]}\r\n                        errorText=\"Please enter a valid email address.\"\r\n                        onInput={inputHandler}\r\n                    />\r\n                    <Input\r\n                        element=\"input\"\r\n                        id=\"password\"\r\n                        type=\"password\"\r\n                        label=\"Password\"\r\n                        validators={[VALIDATOR_MINLENGTH(5)]}\r\n                        errorText=\"Please enter a valid password, at least 5 characters.\"\r\n                        onInput={inputHandler}\r\n                    />\r\n                    <Button type=\"submit\" disabled={!formState.isValid}>\r\n                        {isLoginMode ? 'LOGIN' : 'SIGNUP'}\r\n                    </Button>\r\n                </form>\r\n                <Button inverse onClick={switchModeHandler}>\r\n                    SWITCH TO {isLoginMode ? 'SIGNUP' : 'LOGIN'}\r\n                </Button>\r\n            </Card>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Auth;"],"names":["props","file","setFile","useState","previewUrl","setPreviewUrl","isValid","setIsValid","filePickerRef","useRef","useEffect","fileReader","FileReader","onload","result","readAsDataURL","_jsxs","className","children","_jsx","id","ref","style","display","type","accept","onChange","event","pickedFile","fileIsValid","target","files","length","onInput","concat","center","src","alt","Button","onClick","pickImageHandler","current","click","errorText","inputReducer","state","action","value","val","validate","validators","isTouched","inputState","dispatch","useReducer","initialValue","initialValid","changeHandler","touchHandler","element","placeholder","onBlur","rows","htmlFor","label","Modal","onCancel","onClear","header","show","error","footer","ModalOverlay","content","headerClass","onSubmit","preventDefault","contentClass","footerClass","ReactDOM","document","getElementById","_Fragment","Backdrop","CSSTransition","in","mountOnEnter","unmountOnExit","timeout","classNames","formReducer","formIsValid","inputId","inputs","useForm","intialInput","initialFormValidity","formState","useCallback","inputData","formValidity","useHttpClient","isLoading","setIsLoading","setError","activeHttpRequests","sendRequest","async","url","method","arguments","undefined","body","headers","httpAbortCtrl","AbortController","push","response","fetch","signal","responseData","json","filter","reqCtrl","ok","Error","message","err","forEach","aboutCtrl","about","clearError","VALIDATOR_TYPE_REQUIRE","VALIDATOR_TYPE_MINLENGTH","VALIDATOR_TYPE_MAXLENGTH","VALIDATOR_TYPE_EMAIL","VALIDATOR_REQUIRE","VALIDATOR_MINLENGTH","VALIDATOR_EMAIL","validator","trim","test","Auth","auth","useContext","AuthContext","navigate","useNavigate","isLoginMode","setIsLoginMode","inputHandler","setFormData","email","password","ErrorModal","Card","LoadingSpinner","asOverlay","process","JSON","stringify","login","userId","token","formData","FormData","append","name","image","console","log","Authorization","Input","ImageUpload","disabled","inverse","switchModeHandler","prevMode"],"sourceRoot":""}