{"version":3,"file":"static/js/211.d60526fa.chunk.js","mappings":"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","sources":["places/pages/UpdatePlace.js","shared/components/FormElements/Input.js","shared/components/UIElements/Card.js","shared/components/UIElements/ErrorModal.js","shared/components/UIElements/Modal.js","shared/hooks/form-hook.js","shared/hooks/http-hook.js","shared/util/validators.js"],"sourcesContent":["import React, { useEffect, useState, useContext } from 'react';\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\n\r\nimport Input from '../../shared/components/FormElements/Input';\r\nimport Button from '../../shared/components/FormElements/Button';\r\nimport Card from '../../shared/components/UIElements/Card';\r\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\r\nimport ErrorModal from '../../shared/components/UIElements/ErrorModal';\r\nimport {\r\n  VALIDATOR_REQUIRE,\r\n  VALIDATOR_MINLENGTH\r\n} from '../../shared/util/validators';\r\nimport { useForm } from '../../shared/hooks/form-hook';\r\nimport { useHttpClient } from '../../shared/hooks/http-hook';\r\nimport { AuthContext } from '../../shared/context/auth-context';\r\nimport './PlaceForm.css';\r\n\r\nconst UpdatePlace = () => {\r\n  const auth = useContext(AuthContext);\r\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\r\n  const [loadedPlace, setLoadedPlace] = useState();\r\n  const placeId = useParams().placeId;\r\n  const navigate = useNavigate();\r\n\r\n  const [formState, inputHandler, setFormData] = useForm(\r\n    {\r\n      title: {\r\n        value: '',\r\n        isValid: false\r\n      },\r\n      description: {\r\n        value: '',\r\n        isValid: false\r\n      }\r\n    },\r\n    false\r\n  );\r\n\r\n  useEffect(() => {\r\n    const fetchPlace = async () => {\r\n      try {\r\n        const responseData = await sendRequest(\r\n          `${process.env.REACT_APP_BACKEND_URL}/places/${placeId}`\r\n        );\r\n        setLoadedPlace(responseData.place);\r\n        setFormData(\r\n          {\r\n            title: {\r\n              value: responseData.place.title,\r\n              isValid: true\r\n            },\r\n            description: {\r\n              value: responseData.place.description,\r\n              isValid: true\r\n            }\r\n          },\r\n          true\r\n        );\r\n\r\n      } catch (err) { }\r\n    };\r\n    fetchPlace();\r\n  }, [sendRequest, placeId, setFormData]);\r\n\r\n  const placeUpdateSubmitHandler = async event => {\r\n    event.preventDefault();\r\n    \r\n    try {\r\n      await sendRequest(\r\n        `${process.env.REACT_APP_BACKEND_URL}/places/${placeId}`,\r\n        'PATCH',\r\n        JSON.stringify({\r\n          title: formState.inputs.title.value,\r\n          description: formState.inputs.description.value\r\n        }),\r\n        {\r\n          'Content-Type': 'application/json',\r\n          Authorization: 'Bearer ' + auth.token,\r\n        }\r\n      );\r\n      navigate('/' + auth.userId + '/places');\r\n    } catch (err) { }\r\n  };\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <div className=\"center\">\r\n        <LoadingSpinner />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (!loadedPlace && !error) {\r\n    return (\r\n      <div className=\"center\">\r\n        <Card>\r\n          <h2>Could not find place!</h2>\r\n        </Card>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <ErrorModal error={error} onClear={clearError} />\r\n      {!isLoading && loadedPlace && (\r\n        <form className=\"place-form\" onSubmit={placeUpdateSubmitHandler}>\r\n          <Input\r\n            id=\"title\"\r\n            element=\"input\"\r\n            type=\"text\"\r\n            label=\"Title\"\r\n            validators={[VALIDATOR_REQUIRE()]}\r\n            errorText=\"Please enter a valid title.\"\r\n            onInput={inputHandler}\r\n            initialValue={loadedPlace.title}\r\n            initialValid={true}\r\n          />\r\n          <Input\r\n            id=\"description\"\r\n            element=\"textarea\"\r\n            label=\"Description\"\r\n            validators={[VALIDATOR_MINLENGTH(5)]}\r\n            errorText=\"Please enter a valid description (min. 5 characters).\"\r\n            onInput={inputHandler}\r\n            initialValue={loadedPlace.description}\r\n            initialValid={true}\r\n          />\r\n          <Button type=\"submit\" disabled={!formState.isValid}>\r\n            UPDATE PLACE\r\n          </Button>\r\n        </form>\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default UpdatePlace;\r\n","import React, { useReducer, useEffect } from 'react';\r\n\r\nimport { validate } from '../../util/validators';\r\nimport './Input.css';\r\n\r\nconst inputReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case 'CHANGE':\r\n      return {\r\n        ...state,\r\n        value: action.val,\r\n        isValid: validate(action.val, action.validators)\r\n      };\r\n    case 'TOUCH': {\r\n      return {\r\n        ...state,\r\n        isTouched: true\r\n      }\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst Input = props => {\r\n  const [inputState, dispatch] = useReducer(inputReducer, {\r\n    value: props.initialValue  || '',\r\n    isTouched: false,\r\n    isValid: props.initialValid  || false\r\n  });\r\n\r\n  const { id, onInput } = props;\r\n  const { value, isValid } = inputState;\r\n\r\n  useEffect(() => {\r\n    onInput(id, value, isValid)\r\n  }, [id, value, isValid, onInput]);\r\n\r\n  const changeHandler = event => {\r\n    dispatch({\r\n      type: 'CHANGE',\r\n      val: event.target.value,\r\n      validators: props.validators\r\n    });\r\n  };\r\n\r\n  const touchHandler = () => {\r\n    dispatch({\r\n      type: 'TOUCH'\r\n    });\r\n  };\r\n\r\n  const element =\r\n    props.element === 'input' ? (\r\n      <input\r\n        id={props.id}\r\n        type={props.type}\r\n        placeholder={props.placeholder}\r\n        onChange={changeHandler}\r\n        onBlur={touchHandler}\r\n        value={inputState.value}\r\n      />\r\n    ) : (\r\n      <textarea\r\n        id={props.id}\r\n        rows={props.rows || 3}\r\n        onChange={changeHandler}\r\n        onBlur={touchHandler}\r\n        value={inputState.value}\r\n      />\r\n    );\r\n\r\n  return (\r\n    <div\r\n      className={`form-control ${!inputState.isValid && inputState.isTouched &&\r\n        'form-control--invalid'}`}\r\n    >\r\n      <label htmlFor={props.id}>{props.label}</label>\r\n      {element}\r\n      {!inputState.isValid && inputState.isTouched && <p>{props.errorText}</p>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Input;","import React from 'react';\r\n\r\nimport './Card.css';\r\n\r\nconst Card = props => {\r\n  return (\r\n    <div className={`card ${props.className}`} style={props.style}>\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;","import React from 'react';\r\n\r\nimport Modal from './Modal';\r\nimport Button from '../FormElements/Button';\r\n\r\nconst ErrorModal = (props) => {\r\n    return (\r\n        <Modal\r\n            onCancel={props.onClear}\r\n            header=\"An Error Occurred!\"\r\n            show={!!props.error}\r\n            footer={<Button onClick={props.onClear}>Okay</Button>}\r\n        >\r\n            <p>{props.error}</p>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default ErrorModal","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { CSSTransition } from 'react-transition-group';\r\nimport Backdrop from './Backdrop';\r\nimport './Modal.css';\r\n\r\nconst ModalOverlay = (props) => {\r\n    const content = (\r\n        <div className={`modal ${props.className}`} style={props.style}>\r\n            <header className={`modal__header ${props.headerClass}`}>\r\n                <h2>{props.header}</h2>\r\n            </header>\r\n            <form\r\n                onSubmit={\r\n                    props.onSubmit ? props.onSubmit : event => event.preventDefault()\r\n                }\r\n            >\r\n                <div className={`modal__content ${props.contentClass}`}>\r\n                    {props.children}\r\n                </div>\r\n                <footer className={`modal__footer ${props.footerClass}`}>\r\n                    {props.footer}\r\n                </footer>\r\n            </form>\r\n        </div>\r\n    )\r\n\r\n\r\n    return ReactDOM.createPortal(content, document.getElementById('modal-hook'));\r\n}\r\n\r\nconst Modal = props => {\r\n    return (\r\n        <>\r\n            {props.show && <Backdrop onClick={props.onCancel} />}\r\n            <CSSTransition\r\n                in={props.show}\r\n                mountOnEnter\r\n                unmountOnExit\r\n                timeout={200}\r\n                classNames=\"modal\"\r\n            >\r\n                <ModalOverlay {...props} />\r\n            </CSSTransition>\r\n        </>\r\n\r\n    )\r\n}\r\n\r\nexport default Modal","import { useCallback, useReducer } from 'react';\r\n\r\nconst formReducer = (state, action) => {\r\n    switch (action.type) {\r\n        case 'INPUT_CHANGE':\r\n            let formIsValid = true;\r\n            for (const inputId in state.inputs) {\r\n                if (inputId === action.inputId) {\r\n                    formIsValid = formIsValid && action.isValid;\r\n                } else {\r\n                    formIsValid = formIsValid && state.inputs[inputId].isValid;\r\n                }\r\n            }\r\n\r\n            return {\r\n                ...state,\r\n                inputs: {\r\n                    ...state.inputs,\r\n                    [action.inputId]: { value: action.value, isValid: action.isValid }\r\n                },\r\n                isValid: formIsValid\r\n            }\r\n\r\n        case 'SET_DATA':\r\n            return {\r\n                inputs: action.inputs,\r\n                isValid: action.formIsValid,\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\nexport const useForm = (intialInput, initialFormValidity) => {\r\n    const [formState, dispatch] = useReducer(formReducer, {\r\n        inputs: intialInput,\r\n        isValid: initialFormValidity\r\n    });\r\n\r\n    const inputHandler = useCallback((id, value, isValid) => {\r\n        dispatch({\r\n            type: 'INPUT_CHANGE',\r\n            value: value,\r\n            isValid: isValid,\r\n            inputId: id\r\n        });\r\n    }, []);\r\n\r\n    const setFormData = useCallback((inputData, formValidity) => {\r\n        dispatch({\r\n            type: 'SET_DATA',\r\n            inputs: inputData,\r\n            formIsValid: formValidity\r\n        })\r\n    }, []);\r\n\r\n    return [formState, inputHandler, setFormData];\r\n}","import { useState, useCallback, useRef, useEffect } from 'react';\r\n\r\nexport const useHttpClient = () => {\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [error, setError] = useState();\r\n\r\n    const activeHttpRequests = useRef([]);\r\n\r\n    const sendRequest = useCallback(\r\n        async (url, method = 'GET', body = null, headers = {}) => {\r\n            setIsLoading(true);\r\n            const httpAbortCtrl = new AbortController();\r\n            activeHttpRequests.current.push(httpAbortCtrl);\r\n\r\n            try {\r\n                const response = await fetch(url, {\r\n                    method,\r\n                    body,\r\n                    headers,\r\n                    signal: httpAbortCtrl.signal\r\n                });\r\n\r\n                const responseData = await response.json();\r\n\r\n                activeHttpRequests.current = activeHttpRequests.current.filter(\r\n                    reqCtrl => reqCtrl !== httpAbortCtrl\r\n                );\r\n\r\n                if (!response.ok) {\r\n                    throw new Error(responseData.message);\r\n                }\r\n\r\n                setIsLoading(false);\r\n                return responseData;\r\n                \r\n            } catch (err) {\r\n                setError(err.message);\r\n                setIsLoading(false);\r\n                throw err;\r\n            }\r\n        },\r\n        []\r\n    );\r\n\r\n    const clearError = () => {\r\n        setError(null);\r\n    }\r\n\r\n    useEffect(() => {\r\n        activeHttpRequests.current.forEach(aboutCtrl => aboutCtrl.about());\r\n    }, []);\r\n\r\n    return { isLoading, error, sendRequest, clearError };\r\n\r\n};","const VALIDATOR_TYPE_REQUIRE = 'REQUIRE';\r\nconst VALIDATOR_TYPE_MINLENGTH = 'MINLENGTH';\r\nconst VALIDATOR_TYPE_MAXLENGTH = 'MAXLENGTH';\r\nconst VALIDATOR_TYPE_MIN = 'MIN';\r\nconst VALIDATOR_TYPE_MAX = 'MAX';\r\nconst VALIDATOR_TYPE_EMAIL = 'EMAIL';\r\nconst VALIDATOR_TYPE_FILE = 'FILE';\r\n\r\nexport const VALIDATOR_REQUIRE = () => ({ type: VALIDATOR_TYPE_REQUIRE });\r\nexport const VALIDATOR_FILE = () => ({ type: VALIDATOR_TYPE_FILE });\r\nexport const VALIDATOR_MINLENGTH = val => ({\r\n  type: VALIDATOR_TYPE_MINLENGTH,\r\n  val: val\r\n});\r\nexport const VALIDATOR_MAXLENGTH = val => ({\r\n  type: VALIDATOR_TYPE_MAXLENGTH,\r\n  val: val\r\n});\r\nexport const VALIDATOR_MIN = val => ({ type: VALIDATOR_TYPE_MIN, val: val });\r\nexport const VALIDATOR_MAX = val => ({ type: VALIDATOR_TYPE_MAX, val: val });\r\nexport const VALIDATOR_EMAIL = () => ({ type: VALIDATOR_TYPE_EMAIL });\r\n\r\nexport const validate = (value, validators) => {\r\n  let isValid = true;\r\n  for (const validator of validators) {\r\n    if (validator.type === VALIDATOR_TYPE_REQUIRE) {\r\n      isValid = isValid && value.trim().length > 0;\r\n    }\r\n    if (validator.type === VALIDATOR_TYPE_MINLENGTH) {\r\n      isValid = isValid && value.trim().length >= validator.val;\r\n    }\r\n    if (validator.type === VALIDATOR_TYPE_MAXLENGTH) {\r\n      isValid = isValid && value.trim().length <= validator.val;\r\n    }\r\n    if (validator.type === VALIDATOR_TYPE_MIN) {\r\n      isValid = isValid && +value >= validator.val;\r\n    }\r\n    if (validator.type === VALIDATOR_TYPE_MAX) {\r\n      isValid = isValid && +value <= validator.val;\r\n    }\r\n    if (validator.type === VALIDATOR_TYPE_EMAIL) {\r\n      isValid = isValid && /^\\S+@\\S+\\.\\S+$/.test(value);\r\n    }\r\n  }\r\n  return isValid;\r\n};"],"names":["UpdatePlace","auth","useContext","AuthContext","isLoading","error","sendRequest","clearError","useHttpClient","loadedPlace","setLoadedPlace","useState","placeId","useParams","navigate","useNavigate","formState","inputHandler","setFormData","useForm","title","value","isValid","description","useEffect","async","responseData","concat","process","place","err","fetchPlace","_jsx","className","children","LoadingSpinner","_jsxs","React","ErrorModal","onClear","onSubmit","event","preventDefault","JSON","stringify","inputs","Authorization","token","userId","Input","id","element","type","label","validators","VALIDATOR_REQUIRE","errorText","onInput","initialValue","initialValid","VALIDATOR_MINLENGTH","Button","disabled","Card","inputReducer","state","action","val","validate","isTouched","props","inputState","dispatch","useReducer","changeHandler","target","touchHandler","placeholder","onChange","onBlur","rows","htmlFor","style","Modal","onCancel","header","show","footer","onClick","ModalOverlay","content","headerClass","contentClass","footerClass","ReactDOM","document","getElementById","_Fragment","Backdrop","CSSTransition","in","mountOnEnter","unmountOnExit","timeout","classNames","formReducer","formIsValid","inputId","intialInput","initialFormValidity","useCallback","inputData","formValidity","setIsLoading","setError","activeHttpRequests","useRef","url","method","arguments","length","undefined","body","headers","httpAbortCtrl","AbortController","current","push","response","fetch","signal","json","filter","reqCtrl","ok","Error","message","forEach","aboutCtrl","about","VALIDATOR_TYPE_REQUIRE","VALIDATOR_TYPE_MINLENGTH","VALIDATOR_TYPE_MAXLENGTH","VALIDATOR_TYPE_EMAIL","VALIDATOR_EMAIL","validator","trim","test"],"sourceRoot":""}